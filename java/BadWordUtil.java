package com.example.demo;import java.util.*;public class BadWordUtil {	public static Set<String> words;	public static Map<String, String> wordMap;	private static BadWordUtil badWordUtil;	/**	 * 生成敏感词缓存	 *	 * @param	 */	private BadWordUtil() {		BadWordUtil.words = readTxtByLine();		addBadWordToHashMap(BadWordUtil.words);	}	/**	 * 检查文字中是否包含敏感字符，检查规则如下：<br>	 *	 * @param txt	 * @param beginIndex	 * @param	 * @return，如果存在，则返回敏感词字符的长度，不存在返回0	 * @version 1.0	 */	@SuppressWarnings({"rawtypes"})	private int checkBadWord(String txt, int beginIndex) {		boolean flag = false; // 敏感词结束标识位：用于敏感词只有1位的情况		int matchFlag = 0; // 匹配标识数默认为0		char word = 0;		Map nowMap = wordMap;		for (int i = beginIndex; i < txt.length(); i++) {			word = txt.charAt(i);			nowMap = (Map) nowMap.get(word); // 获取指定key			if (nowMap != null) { // 存在，则判断是否为最后一个				matchFlag++; // 找到相应key，匹配标识+1				if ("1".equals(nowMap.get("isEnd"))) { // 如果为最后一个匹配规则,结束循环，返回匹配标识数					flag = true; // 结束标志位为true				}			} else { // 不存在，直接返回				break;			}		}        /*		 * “粉饰”匹配词库：“粉饰太平”竟然说是敏感词 “个人”匹配词库：“个人崇拜”竟然说是敏感词 if(matchFlag < 2 && !flag){		 * matchFlag = 0; }		 */		if (!flag) {			matchFlag = 0;		}		return matchFlag;	}	/**	 * 判断文字是否包含敏感字符	 *	 * @param txt 文字	 * @return 若包含返回true，否则返回false	 * @version 1.0	 */	@SuppressWarnings("unused")	private boolean isContaintBadWord(String txt) {		boolean flag = false;		for (int i = 0; i < txt.length(); i++) {			int matchFlag = checkBadWord(txt, i); // 判断是否包含敏感字符			if (matchFlag > 0) { // 大于0存在，返回true				flag = true;			}		}		return flag;	}	/**	 * 替换敏感字字符	 *	 * @param txt	 * @param replaceChar 替换字符，默认*	 * @version 1.0	 */	@SuppressWarnings("unused")	private String replaceBadWord(String txt, String replaceChar) {		String resultTxt = txt;		Set<String> set = getBadWord(txt); // 获取所有的敏感词		Iterator<String> iterator = set.iterator();		String word = null;		String replaceString = null;		while (iterator.hasNext()) {			word = iterator.next();			replaceString = getReplaceChars(replaceChar, word.length());			resultTxt = resultTxt.replaceAll(word, replaceString);		}		return resultTxt;	}	/**	 * 获取文字中的敏感词	 *	 * @param txt 文字	 * @return	 * @version 1.0	 */	private Set<String> getBadWord(String txt) {		Set<String> sensitiveWordList = new HashSet<String>();		for (int i = 0; i < txt.length(); i++) {			int length = checkBadWord(txt, i); // 判断是否包含敏感字符			if (length > 0) { // 存在,加入list中				sensitiveWordList.add(txt.substring(i, i + length));				i = i + length - 1; // 减1的原因，是因为for会自增			}		}		return sensitiveWordList;	}	/**	 * 获取替换字符串	 *	 * @param replaceChar	 * @param length	 * @return	 * @version 1.0	 */	private String getReplaceChars(String replaceChar, int length) {		String resultReplace = replaceChar;		for (int i = 1; i < length; i++) {			resultReplace += replaceChar;		}		return resultReplace;	}	/**	 * TODO 将我们的敏感词库构建成了一个类似与一颗一颗的树，这样我们判断一个词是否为敏感词时就大大减少了检索的匹配范围。	 *	 * @param keyWordSet 敏感词库	 * @author yqwang0907	 * @date 2018年2月28日下午5:28:08	 */	@SuppressWarnings({"unchecked", "rawtypes"})	private void addBadWordToHashMap(Set<String> keyWordSet) {		wordMap = new HashMap(keyWordSet.size()); // 初始化敏感词容器，减少扩容操作		String key = null;		Map nowMap = null;		Map<String, String> newWorMap = null;		// 迭代keyWordSet		Iterator<String> iterator = keyWordSet.iterator();		while (iterator.hasNext()) {			key = iterator.next(); // 关键字			nowMap = wordMap;			for (int i = 0; i < key.length(); i++) {				char keyChar = key.charAt(i); // 转换成char型				Object wordMap = nowMap.get(keyChar); // 获取				if (wordMap != null) { // 如果存在该key，直接赋值					nowMap = (Map) wordMap;				} else { // 不存在则，则构建一个map，同时将isEnd设置为0，因为他不是最后一个					newWorMap = new HashMap<String, String>();					newWorMap.put("isEnd", "0"); // 不是最后一个					nowMap.put(keyChar, newWorMap);					nowMap = newWorMap;				}				if (i == key.length() - 1) {					nowMap.put("isEnd", "1"); // 最后一个				}			}		}	}	/**	 * 敏感词检测调用接口	 *	 * @param content 检测文本	 * @return 检测结果	 */	public Map check(String content) {		Map map = new HashMap();		long start = System.currentTimeMillis();		Set<String> set = getBadWord(content);		long end = System.currentTimeMillis();		map.put("keyNum", BadWordUtil.wordMap.size());		map.put("result", set);		map.put("time", end - start);		boolean flag = true;		if (set != null && set.size() > 0) {			flag = false;		}		map.put("flag", flag);		return map;	}	/**	 * 清空敏感词	 */	public void clear() {		badWordUtil = null;	}	public static BadWordUtil getBadWordUtil() {		if (badWordUtil == null) {			badWordUtil = new BadWordUtil();		}		return badWordUtil;	}	private Set<String> readTxtByLine() {		Set<String> keyWordSet = new HashSet<String>();		keyWordSet.add("彩票");		keyWordSet.add("人民");		keyWordSet.add("狗高");		keyWordSet.add("黄色");		keyWordSet.add("日本");		return keyWordSet;	}	public static void main(String[] args) {		String string = "中华人民共和国内烟一中国直以为写小说是作家的事，日本普通如我这样的业余写作爱好者，写黄色小说那只能是梦想";		BadWordUtil badWordUtil = BadWordUtil.getBadWordUtil();		Map map = badWordUtil.check(string);		System.out.println(map);		String s = badWordUtil.replaceBadWord(string, "*");		System.out.println(s);	}}